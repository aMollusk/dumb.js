{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction render(elm, node) {\n  if (node.childNodes[0]) {\n    node.replaceChild(elm, node.childNodes[0]);\n    return;\n  }\n  node.appendChild(elm);\n}\n\nfunction c(elm, props = {}) {\n  if (typeof elm === 'object') {\n    elm = Object.create(elm);\n    elm.state = Object.assign({}, elm.state);\n    console.log(elm);\n    let node = document.createElement('div');\n    elm.node = node; // Save the node to the object\n    elm.setState = function (newState) {\n      this.state = newState;\n      // This is not sufficient, as it will not preserve children state on re-render\n      render(this.render(props), this.node);\n    };\n\n    props.c = elm.render(props);\n\n    if (elm.hasInit === undefined) {\n      let temp = elm;\n      // This will cause a bug and mount the component again because\n      // of the way we re-render. To fix.\n      setTimeout(() => {\n        temp.init();\n        temp.hasInit = true;\n      }, 0);\n    }\n\n    elm = node;\n  } else {\n    elm = document.createElement(elm);\n    if (typeof props == \"string\") {\n      elm.appendChild(document.createTextNode(props));\n      return elm;\n    }\n  }\n\n  props = typeof props == \"function\" ? props() : props;\n\n  Object.keys(props).forEach(key => {\n    if (key != \"c\") elm[key] = props[key];\n  });\n\n  // Children\n  if (props.c) {\n    if (Array.isArray(props.c)) {\n      props.c.forEach(c => {\n        elm.appendChild(c);\n      });\n    } else if (typeof props.c === 'string') {\n      elm.appendChild(document.createTextNode(props.c));\n    } else {\n      elm.appendChild(props.c);\n    }\n  }\n  return elm;\n}\n\nexports.render = render;\nexports.c = c;"},"hash":"487b02b90d062820d11f88fcc22d173a"}